Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Lasso", MLps = "Logit_lasso", polynomial = 2)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Lasso", MLps = "Logit_lasso", polynomial = 5)
devtools::load_all()
devtools::document()
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Lasso", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Ridge", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Logit_lasso", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "RF", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
X2 <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + X2 + rnorm(n)
Y1 <- 5 + X + X2 + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
XX <- data.frame(X1 = X, X2 = X2)
LRate(Y,XX,D, MLreg = "XGB", MLps = "Logit_lasso")
n <- 5000
X <- rnorm(n)
X2 <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + X2 + rnorm(n)
Y1 <- 5 + X + X2 + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
XX <- data.frame(X1 = X, X2 = X2)
LRate(Y,XX,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
debug(LRate)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
aa <- data.matrix(Xnew)
View(aa)
model$feature_names
devtools::install_github("joelters/ML")
devtools::install_github("joelters/ML")
devtools::load_all()
devtools::document()
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 1)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "RF", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Ridge", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
X2 <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + X2 + rnorm(n)
Y1 <- 5 + X + X2 + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
XX <- data.frame(X1 = X, X2 = X2)
LRate(Y,XX,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
devtools::install_github("joelters/ML")
devtools::load_all()
devtools::document()
n <- 5000
X <- rnorm(n)
X2 <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + X2 + rnorm(n)
Y1 <- 5 + X + X2 + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
XX <- data.frame(X1 = X, X2 = X2)
LRate(Y,XX,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "Ridge", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "XGB", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
LRate(Y,X,D, MLreg = "RF", MLps = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
X2 <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + X2 + rnorm(n)
Y1 <- 5 + X + X2 + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
XX <- data.frame(X1 = X, X2 = X2)
LRate(Y,XX,D, MLreg = "RF", MLps = "Logit_lasso", polynomial = 5)
check()
library(devtools)
check()
devtools::load_all()
devtools::document()
check()
n <- 1000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
directMLate(Y,X,D, ML = "RF")
debug(directMLate)
n <- 1000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
directMLate(Y,X,D, ML = "RF")
devtools::load_all()
devtools::load_all()
n <- 1000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
directMLate(Y,X,D, ML = "RF")
check()
check()
use_mit_license()
devtools::load_all()
devtools::document()
check()
devtools::load_all()
devtools::document()
check()
devtools::load_all()
devtools::document()
check()
devtools::load_all()
devtools::document()
check()
devtools::load_all()
devtools::document()
check()
install()
use_r("IPWate")
n <- 1000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
MLps <- "RF"
polynomial = 1
ps <- ML::MLest(X,D,ML = MLps, polynomial = polynomial)
devtools::load_all()
devtools::document()
is.null(NULL)
devtools::load_all()
devtools::document()
n <- 1000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,D, ML = "RF")
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,D, ML = "RF")
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,D, ML = "Logit_lasso")
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,D, ML = "Logit_lasso", polynomial = 5)
n <- 10000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,D, ML = "Logit_lasso", polynomial = 5)
devtools::load_all()
devtools::document()
debug(IPWate)
IPWate(Y,X,D, ML = "Logit_lasso", polynomial = 5)
hist(ps)
IPWate(Y,X,as.numeric(D), ML = "Logit_lasso", polynomial = 5)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,as.numeric(D), ML = "RF", polynomial = 5)
undebug(IPWate)
n <- 5000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,as.numeric(D), ML = "RF", polynomial = 5)
n <- 10000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,as.numeric(D), ML = "RF", polynomial = 5)
IPWate(Y,X,as.numeric(D), ML = "Logit_lasso", polynomial = 1)
n <- 30000
X <- rnorm(n)
D <- runif(n) >= 0.5
Y0 <- X + rnorm(n)
Y1 <- 5 + X + 5*X + rnorm(n)
Y <- Y1*D + Y0*(1-D)
IPWate(Y,X,as.numeric(D), ML = "Logit_lasso", polynomial = 1)
devtools::install_github("joelters/ML")
library(devtools)
document()
n = 100
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X1)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) â‰¥ 0.5
D = runif(n) >= 0.5
Y = Y1*D + Y0*(1-D)
aa = LRate(Y,X,D,MLreg = "SL", MLps = "SL", SL.library = "SL.ranger")
library(SuperLearner)
aa = LRate(Y,X,D,MLreg = "SL", MLps = "SL", SL.library = "SL.ranger")
library(devtools)
# library(SuperLearner)
document()
n = 100
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X1)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) >= 0.5
Y = Y1*D + Y0*(1-D)
aa = LRate(Y,X,D,MLreg = "SL", MLps = "SL", SL.library = "SL.ranger")
library(devtools)
# library(SuperLearner)
document()
n = 100
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X1)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) >= 0.5
Y = Y1*D + Y0*(1-D)
aa = LRate(Y,X,D,MLreg = "SL", MLps = "SL", SL.library = "SL.ranger")
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
x = 100
r = 1
X <- mvrnorm(x, rep(0,dimX), Sigma=sig)
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
library(MASS)
x = 100
r = 1
X <- mvrnorm(x, rep(0,dimX), Sigma=sig)
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
library(MASS)
x = 100
r = 1
dimX = 100
sig = 0.1
X <- mvrnorm(x, rep(0,dimX), Sigma=sig)
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
library(MASS)
x = 100
r = 1
dimX = 100
sig = 0.1
X <- mvrnorm(x, rep(0,dimX), Sigma=diag(sig,dimX))
e0 <- 1*rnorm(x,0,0.1)
e1 <- 1*rnorm(x,0,0.1)
Y0 <-X[,1]+X[,2] + e0
Y1 <- X[,1]+X[,3] + e1
ps <- 1/(1+exp(-X[,1]))
D <- rbinom(x,size=1,prob=ps)
Y <- Y1*D+Y0*(1-D)
MLreg = "SL"
MLps = "SL"
ML_k = "SL.ranger"
dr <- LRate(Y, X, D, MLreg = MLreg, MLps = MLps, K = 5, polynomial = 2, SL.library = ML_k)
(.packages())
detach(SuperLearner())
detach(SuperLearner
)
detach("SuperLearner")
detach("SuperLearner::SuperLearner", unload = TRUE)
=detach
?detach
unloadNamespace("SuperLearner")
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
library(npcausal)
n = 100
X1 = rnorm(n)
X2 = rnorm(n)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) >= 0.5
Y = D*Y1 + (1-D)*Y0
system.time({
drk = ate(y = Y, a = as.numeric(D), x = data.frame(X1,X2), sl.lib = "SL.ranger")
})
system.time({
dr = LRate(Y,X = data.frame(X1,X2),D, MLreg = "SL", MLps = "SL", SL.library = "SL.ranger")
dr$ATE
})
(.packages())
?ranger
mranger = ranger(Y~., data = data.frame(Y = Y,X1,X2))
msl = SuperLearner(Y,data.frame(X1,X2),SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = data.frame(X1[1:5],X2[1:5]), onlySL = TRUE)
fvs = stats::predict(msl, newdata = data.frame(Y = Y[1:5],X1[1:5],X2[1:5]), onlySL = TRUE)
dr = LRate(Y,X = data.frame(X1,X2),D, MLreg = "SL", MLps = "SL", SL.library = "SL.glmnet")
warnings()
rm(list= ls())
library(npcausal)
n = 1000
X1 = rnorm(n)
X2 = rnorm(n)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) >= 0.5
Y = D*Y1 + (1-D)*Y0
system.time({
drk = ate(y = Y, a = as.numeric(D), x = data.frame(X1,X2), sl.lib = "SL.ranger")
})
# debug(ate)
system.time({
dr = LRate(Y,X = data.frame(X1,X2),D, MLreg = "SL", MLps = "SL", SL.library = "SL.glmnet")
dr$ATE
})
fvs = stats::predict(msl, newdata = data.frame(Y = Y[1:5],X1[1:5],X2[1:5]), onlySL = TRUE)
msl = SuperLearner(Y,data.frame(X1,X2),SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = data.frame(Y = Y[1:5],X1[1:5],X2[1:5]), onlySL = TRUE)
X = data.frame(X1,X2)
rm(list= ls())
library(npcausal)
n = 1000
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X2)
Y1 = X1 + X2 + rnorm(n)
Y0 = X1 + rnorm(n)
D = runif(n) >= 0.5
Y = D*Y1 + (1-D)*Y0
system.time({
drk = ate(y = Y, a = as.numeric(D), x = X, sl.lib = "SL.ranger")
})
# debug(ate)
system.time({
dr = LRate(Y,X = X,D, MLreg = "SL", MLps = "SL", SL.library = "SL.glmnet")
dr$ATE
})
(.packages())
mranger = ranger(Y~., data = data.frame(Y = Y,X))
msl = SuperLearner(Y,X,SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = data.frame(Y = Y[1:5],X[1:5,]), onlySL = TRUE)
msl = SuperLearner(Y,X,SL.library = "SL.glmnet")
fvs = stats::predict(msl, newdata = data.frame(Y = Y[1:5],X[1:5,]), onlySL = TRUE)
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
msl = SuperLearner(Y,X,SL.library = "SL.glmnet")
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
msl = SuperLearner(Y,X,SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
msl = SuperLearner(Y,X,SL.library = "SL.ranger")
fvs = SuperLearner::predict.SL.ranger(msl,X[1:5,])
class(msl)
debug(predict.SL.ranger)
fvs = predict.SL.ranger(msl,X[1:5,])
object$object
fvs = predict.SL.ranger(list(msl),X[1:5,])
undebug(predict.SL.ranger)
fvs = predict.SL.ranger(list(object = msl),X[1:5,])
fvs = predict.SL.ranger(list(object = msl),X[1:5,], family = "gaussian")
msl = SuperLearner(Y,X,SL.library = "SL.glmnet")
fvs = predict.SL.ranger(list(object = msl),X[1:5,], family = "gaussian")
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
msl = SuperLearner(Y,X,SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
SL.library
SL.library()
library(devtools)
# library(SuperLearner)
document()
rm(list= ls())
n = 1000
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X2)
Y = X1 + X2 + rnorm(n)
msl = SuperLearner(Y,X,SL.library = "SL.ranger")
fvs = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
rm(list= ls())
n = 100
X1 = rnorm(n)
X2 = rnorm(n)
X = data.frame(X1,X2)
Y = X1 + X2 + rnorm(n)
msranger = SuperLearner(Y[6:n],X[6:n,],SL.library = "SL.ranger")
fvsranger = stats::predict(msl, newdata = X[1:5,], onlySL = TRUE)
fvsranger = stats::predict(msranger, newdata = X[1:5,], onlySL = TRUE)
msglmnet = SuperLearner(Y[6:n],X[6:n,],SL.library = "SL.glmnet")
fvsglmnet = stats::predict(msranger, newdata = X[1:5,], onlySL = TRUE)
fvsglmnet = stats::predict(msglmnet, newdata = X[1:5,], onlySL = TRUE)
fvsranger = stats::predict(msranger, newdata = data.frame(Y = Y,X[1:5,]), onlySL = TRUE)
